# Helper module for making labelled form.
module LabelledFormHelper
  # Create a form for a given model object.  Labels and errors are automatically included.
  # The +form_builder+ is a LabelledFormBuilder, which handles all standard form helper
  # methods.  All the field and select sections are decorated with a label, except for +check_box+,
  # +radio_button+ and +hidden_field+.
  #
  # Example:
  #   <% labelled_form_for :person, @person, :url => { :action => "update" } do |f| %>
  #     <%= f.text_field :first_name %>
  #     <%= f.text_field :last_name %>
  #     <%= f.text_area :biography %>
  #     <%= f.check_box :admin %>
  #   <% end %>
  def labelled_form_for(object_name, object = nil, options = {}, &proc) # :yields: form_builder
    object = instance_variable_get("@#{object_name}") unless object
    if messages = object.errors.on(:base)
      messages = messages.to_sentence if messages.respond_to? :to_sentence
      concat(%Q@<span class="error_message">#{h(messages)}</span>@, proc.binding)
    end
    form_for(object_name, object, options.merge(:builder => LabelledFormBuilder), &proc)
  end

  # Form build for +form_for+ method which includes labels with almost all form fields.  All
  # form helper methods are handled and all of them, except for +check_box+,
  # +radio_button+ and +hidden_field+, are decorated for labels.
  class LabelledFormBuilder < ActionView::Helpers::FormBuilder
    %w(text_field password_field file_field text_area select datetime_select date_select
                    collection_select country_select time_zone_select).each do |selector|
      class_eval <<-end_src
        def #{selector}(method, options = {})
          label(method) +
              @template.send(#{selector.inspect}, @object_name, method, options.merge(:object => @object))
        end
      end_src
    end

    # Returns a submit button.  This button has style class +submit+.
    # [+value+]   the text on the button
    # [+options+] HTML attributes
    def submit(value = 'Submit', options = {})
      options = {:type => 'submit', :value => value}.merge(options)
      if options[:class]
        options[:class] += ' submit'
      else
        options[:class] = 'submit'
      end
      %Q@<input #{options2attributes(options)}/>@
    end

    # Returns a label for a given attribute.  The +for+ attribute point to the same
    # +id+ attribute generated by the form helper tags.
    # [+method_name+] model object attribute name
    # [+options+]     HTML attributes
    def label(method_name, options = {})
      column = object.class.columns_hash[method_name.to_s]
      %Q@
        <label for="#{object_name}_#{method_name}" #{options2attributes(options)}>
          #{column ? column.human_name : method_name.to_s.humanize}
          #{error_messages(method_name)}
        </label>
      @
    end

  private
    def error_messages(method_name)
      if messages = object.errors.on(method_name)
        messages = messages.to_sentence if messages.respond_to? :to_sentence
        %Q@<span class="error_message">#{messages}</span>@
      end
    end
    
    def h(*args); CGI::escapeHTML(*args); end
    
    def options2attributes(options)
      options.map { |k,v| "#{k}=\"#{h v.to_s}\"" }.join(' ')
    end
  end
end